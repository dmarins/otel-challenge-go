// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/repositories/weather-repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/repositories/weather-repository.go -destination=internal/usecase/mocks/weather-repository.go -typed=true -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/dmarins/otel-challenge-go/internal/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockWeatherRepositoryInterface is a mock of WeatherRepositoryInterface interface.
type MockWeatherRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherRepositoryInterfaceMockRecorder
}

// MockWeatherRepositoryInterfaceMockRecorder is the mock recorder for MockWeatherRepositoryInterface.
type MockWeatherRepositoryInterfaceMockRecorder struct {
	mock *MockWeatherRepositoryInterface
}

// NewMockWeatherRepositoryInterface creates a new mock instance.
func NewMockWeatherRepositoryInterface(ctrl *gomock.Controller) *MockWeatherRepositoryInterface {
	mock := &MockWeatherRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockWeatherRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherRepositoryInterface) EXPECT() *MockWeatherRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetWeatherInfo mocks base method.
func (m *MockWeatherRepositoryInterface) GetWeatherInfo(location string) (*models.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherInfo", location)
	ret0, _ := ret[0].(*models.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherInfo indicates an expected call of GetWeatherInfo.
func (mr *MockWeatherRepositoryInterfaceMockRecorder) GetWeatherInfo(location any) *MockWeatherRepositoryInterfaceGetWeatherInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherInfo", reflect.TypeOf((*MockWeatherRepositoryInterface)(nil).GetWeatherInfo), location)
	return &MockWeatherRepositoryInterfaceGetWeatherInfoCall{Call: call}
}

// MockWeatherRepositoryInterfaceGetWeatherInfoCall wrap *gomock.Call
type MockWeatherRepositoryInterfaceGetWeatherInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWeatherRepositoryInterfaceGetWeatherInfoCall) Return(arg0 *models.Weather, arg1 error) *MockWeatherRepositoryInterfaceGetWeatherInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWeatherRepositoryInterfaceGetWeatherInfoCall) Do(f func(string) (*models.Weather, error)) *MockWeatherRepositoryInterfaceGetWeatherInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWeatherRepositoryInterfaceGetWeatherInfoCall) DoAndReturn(f func(string) (*models.Weather, error)) *MockWeatherRepositoryInterfaceGetWeatherInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
