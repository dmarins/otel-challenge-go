// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/dmarins/otel-challenge-go/internal/infrastructure/repositories"
	"github.com/dmarins/otel-challenge-go/internal/infrastructure/web/handlers"
	"github.com/dmarins/otel-challenge-go/internal/usecase"
	"github.com/google/wire"
	"net/http"
)

// Injectors from wire.go:

func NewGetWeatherByZipcodeUseCase(httpClient *http.Client) *usecase.GetWeatherByZipcodeUseCase {
	zipcodeRepository := repositories.NewZipcodeRepository(httpClient)
	weatherRepository := repositories.NewWeatherRepository(httpClient)
	getWeatherByZipcodeUseCase := usecase.NewGetWeatherByZipcodeUseCase(zipcodeRepository, weatherRepository)
	return getWeatherByZipcodeUseCase
}

func NewWeatherHttpHandler(getWeatherByZipcodeUseCase usecase.GetWeatherByZipcodeUseCase) *handlers.WeatherHttpHandler {
	weatherHttpHandler := handlers.NewWeatherHttpHandler(getWeatherByZipcodeUseCase)
	return weatherHttpHandler
}

// wire.go:

var setZipcodeRepository = wire.NewSet(repositories.NewZipcodeRepository, wire.Bind(new(repositories.ZipcodeRepositoryInterface), new(*repositories.ZipcodeRepository)))

var setWeatherRepository = wire.NewSet(repositories.NewWeatherRepository, wire.Bind(new(repositories.WeatherRepositoryInterface), new(*repositories.WeatherRepository)))
